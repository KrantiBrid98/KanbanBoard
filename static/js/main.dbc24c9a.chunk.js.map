{"version":3,"sources":["Components/EditModal.js","Components/AddModal.js","Components/Board.js","App.js","index.js"],"names":["EditModal","props","onClose","selectedValue","open","setStateData","stateData","React","useState","title","setTitle","body","setBody","Dialog","DialogTitle","id","className","List","Input","value","onChange","e","target","Button","onClick","updatedVal","type","map","d","localStorage","setItem","JSON","stringify","AddModal","category","setCategory","Select","labelId","MenuItem","items","length","selected","completed","data","Board","getItem","parse","isEditModalOpen","setEditModalOpen","isAddModalOpen","setAddModalOpen","setSelectedValue","id2List","droppable","droppable2","droppable3","getList","onEditClick","item","index","onDeleteClick","splice","reorder","list","startIndex","endIndex","result","Array","from","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","droppableId","onDragEnd","sState","state","resultKeys","Object","keys","provided","snapshot","ref","innerRef","draggableId","draggableProps","dragHandleProps","Edit","style","cursor","placeholder","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbc24c9a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { Button, Input } from \"@material-ui/core\";\r\n\r\n\r\nfunction EditModal(props) {\r\n    const { onClose, selectedValue, open, setStateData, stateData } = props;\r\n\r\n    const [title, setTitle] = React.useState(selectedValue.title);\r\n    const [body, setBody] = React.useState(selectedValue.body);\r\n\r\n    const onSaveClick = () => {\r\n        const data = stateData[selectedValue.type];\r\n        const updatedVal = data.map((d) => {\r\n            if (d.id == selectedValue.id) {\r\n                return {\r\n                    ...d,\r\n                    title,\r\n                    body\r\n                }\r\n            } else {\r\n                return d\r\n            }\r\n        })\r\n        setStateData({\r\n            ...stateData,\r\n            [selectedValue.type]: updatedVal\r\n        })\r\n        localStorage.setItem('tasks', JSON.stringify({\r\n            ...stateData,\r\n            [selectedValue.type]: updatedVal\r\n        }));\r\n\r\n        onClose(false);\r\n    }\r\n    return (\r\n        <Dialog onClose={() => onClose(false)} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n            <DialogTitle id=\"simple-dialog-title\" className=\"heading\">Edit the Task !</DialogTitle>\r\n            <div className=\"modal-container\">\r\n            <List className=\"title\">\r\n                Title: <Input\r\n                    value={title}\r\n                    onChange={e => setTitle(e.target.value)}\r\n                />\r\n            </List>\r\n            <List className=\"title\">\r\n                Body: <Input\r\n                    value={body}\r\n                    onChange={e => setBody(e.target.value)}\r\n                />\r\n            </List>\r\n            </div>\r\n            <Button\r\n                className=\"button\"\r\n                onClick={onSaveClick}\r\n            >Save</Button>\r\n            <Button\r\n                className=\"button\"\r\n                onClick={() => onClose(false)}\r\n            >Cancel</Button>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default EditModal;","import React from \"react\";\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { Button, Input, Select, MenuItem } from \"@material-ui/core\";\r\n\r\n\r\nfunction AddModal(props) {\r\n    const { onClose, open, setStateData, stateData } = props;\r\n\r\n    const [title, setTitle] = React.useState(\"\");\r\n    const [body, setBody] = React.useState(\"\");\r\n    const [category, setCategory] = React.useState(\"\");\r\n\r\n    const onSaveClick = () => {\r\n        const id = `item-${stateData.items.length + stateData.selected.length + stateData.completed.length + 1}`\r\n        const data = [\r\n            ...stateData[category],\r\n            {\r\n                id,\r\n                title,\r\n                body\r\n            }]\r\n        setStateData({\r\n            ...stateData,\r\n            [category]: data\r\n        })\r\n        localStorage.setItem('tasks', JSON.stringify({\r\n            ...stateData,\r\n            [category]: data\r\n        }));\r\n\r\n        onClose(false);\r\n    }\r\n    return (\r\n        <Dialog onClose={() => onClose(false)} aria-labelledby=\"simple-dialog-title\" open={open} className=\"modal\">\r\n            <DialogTitle id=\"simple-dialog-title\" className=\"heading\">Add a new Task !</DialogTitle>\r\n            <div className=\"modal-container\">\r\n                <List className=\"title\">\r\n                    Title: <Input\r\n                        value={title}\r\n                        onChange={e => setTitle(e.target.value)}\r\n                    />\r\n                </List>\r\n                <List className=\"title\">\r\n                    Body: <Input\r\n                        value={body}\r\n                        onChange={e => setBody(e.target.value)}\r\n                    />\r\n                </List>\r\n                <List className=\"title\">\r\n                    Category: <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={category}\r\n                        onChange={(e) => setCategory(e.target.value)}\r\n                    >\r\n                        <MenuItem value={\"items\"}>To Do</MenuItem>\r\n                        <MenuItem value={\"selected\"}>In Progress</MenuItem>\r\n                        <MenuItem value={\"completed\"}>Completed</MenuItem>\r\n                    </Select>\r\n                </List>\r\n            </div>\r\n            <Button\r\n                className=\"button\"\r\n                onClick={onSaveClick}\r\n            >Save</Button>\r\n            <Button\r\n                className=\"button\"\r\n                onClick={() => onClose(false)}\r\n            >Cancel</Button>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default AddModal;","import React from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { Edit } from \"@material-ui/icons\";\r\nimport { Button } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditModal from \"./EditModal\";\r\nimport AddModal from \"./AddModal\";\r\n\r\nconst Board = () => {\r\n\r\n    const [stateData, setStateData] = React.useState(\r\n        localStorage.getItem('tasks') ? JSON.parse(localStorage.getItem('tasks')) :\r\n            {\r\n                items: [{\r\n                    id: \"item-1\",\r\n                    title: \"title 1\",\r\n                    body: \"body 1\"\r\n                },\r\n                {\r\n                    id: \"item-2\",\r\n                    title: \"title 2\",\r\n                    body: \"body 2\"\r\n                },\r\n                {\r\n                    id: \"item-3\",\r\n                    title: \"title 3\",\r\n                    body: \"body 3\"\r\n                }],\r\n                selected: [{\r\n                    id: \"item-4\",\r\n                    title: \"title 4\",\r\n                    body: \"body 4\"\r\n                },\r\n                {\r\n                    id: \"item-5\",\r\n                    title: \"title 5\",\r\n                    body: \"body 5\"\r\n                },\r\n                {\r\n                    id: \"item-6\",\r\n                    title: \"title 6\",\r\n                    body: \"body 6\"\r\n                }],\r\n                completed: [{\r\n                    id: \"item-90\",\r\n                    title: \"title 90\",\r\n                    body: \"body 90\"\r\n                }]\r\n            }\r\n    )\r\n\r\n    const [isEditModalOpen, setEditModalOpen] = React.useState(false);\r\n    const [isAddModalOpen, setAddModalOpen] = React.useState(false);\r\n    const [selectedValue, setSelectedValue] = React.useState({});\r\n\r\n    const id2List = {\r\n        droppable: 'items',\r\n        droppable2: 'selected',\r\n        droppable3: 'completed'\r\n    };\r\n\r\n    const getList = id => id2List[id];\r\n\r\n    const onDragEnd = result => {\r\n\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                stateData[getList(source.droppableId)],\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            const sState = getList(source.droppableId);\r\n\r\n            const state = {\r\n                ...stateData,\r\n                [sState]: items\r\n            };\r\n            setStateData(state);\r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n        } else {\r\n            const result = move(\r\n                stateData[getList(source.droppableId)],\r\n                stateData[getList(destination.droppableId)],\r\n                source,\r\n                destination\r\n            );\r\n\r\n            var resultKeys = Object.keys(result);\r\n            setStateData({\r\n                ...stateData,\r\n                [id2List[resultKeys[0]]]: result[resultKeys[0]],\r\n                [id2List[resultKeys[1]]]: result[resultKeys[1]]\r\n            });\r\n            localStorage.setItem('tasks', JSON.stringify({\r\n                ...stateData,\r\n                items: result.droppable,\r\n                selected: result.droppable2\r\n            }));\r\n\r\n        }\r\n    };\r\n\r\n    const onEditClick = (item, index, type) => {\r\n        setSelectedValue({ ...item, type })\r\n        setEditModalOpen(true);\r\n    }\r\n\r\n    const onDeleteClick = (item, index, type) => {\r\n        const data = stateData[type];\r\n        data.splice(index, 1);\r\n\r\n        setStateData({\r\n            ...stateData,\r\n            [type]: data,\r\n        })\r\n        localStorage.setItem('tasks', JSON.stringify({\r\n            ...stateData,\r\n            [type]: data,\r\n        }));\r\n\r\n    }\r\n\r\n    // a little function to help us with reordering the result\r\n    const reorder = (list, startIndex, endIndex) => {\r\n        const result = Array.from(list);\r\n        const [removed] = result.splice(startIndex, 1);\r\n        result.splice(endIndex, 0, removed);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Moves an item from one list to another list.\r\n     */\r\n    const move = (source, destination, droppableSource, droppableDestination) => {\r\n        const sourceClone = Array.from(source);\r\n        const destClone = Array.from(destination);\r\n        const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n        destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n        const result = {};\r\n        result[droppableSource.droppableId] = sourceClone;\r\n        result[droppableDestination.droppableId] = destClone;\r\n\r\n        return result;\r\n    };\r\n\r\n    const onAddClick = () => {\r\n        setAddModalOpen(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div><Button className=\"button add-task\" onClick={onAddClick}>Add Task</Button></div>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            className=\"main-container\"\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            <div className=\"heading\">TO DO</div>\r\n                            {stateData.items.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            className=\"card\"\r\n                                        >\r\n                                            <Edit\r\n                                                style={{ cursor: 'pointer' }}\r\n                                                className=\"icons\"\r\n                                                onClick={e => {\r\n                                                    onEditClick(item, index, \"items\")\r\n                                                }}\r\n\r\n                                            />\r\n                                            <DeleteIcon\r\n                                                style={{ cursor: 'pointer' }}\r\n                                                className=\"icons\"\r\n                                                onClick={e => {\r\n                                                    onDeleteClick(item, index, \"items\")\r\n                                                }}\r\n                                            />\r\n                                            <div className=\"title\">{item.title}</div>\r\n                                            <div className=\"content\">{item.body}</div>\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            className=\"main-container\"\r\n                            ref={provided.innerRef}\r\n                        > <div className=\"heading\">IN PROGRESS</div>\r\n                            {stateData.selected.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            className=\"card\"\r\n                                        >\r\n                                            <Edit\r\n                                                className=\"icons\"\r\n                                                style={{ cursor: 'pointer' }}\r\n                                                onClick={e => {\r\n                                                    onEditClick(item, index, \"selected\")\r\n                                                }}\r\n\r\n                                            />\r\n                                            <DeleteIcon\r\n                                                className=\"icons\"\r\n                                                style={{ cursor: 'pointer' }}\r\n                                                onClick={e => {\r\n                                                    onDeleteClick(item, index, \"selected\")\r\n                                                }}\r\n                                            />\r\n                                            <div className=\"title\">{item.title}</div>\r\n                                            <div className=\"content\">{item.body}</div>\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"droppable3\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            className=\"main-container\"\r\n                            ref={provided.innerRef}\r\n                        > <div className=\"heading\">COMPLETED</div>\r\n                            {stateData.completed.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            className=\"card\"\r\n                                        >\r\n                                            <Edit\r\n                                                className=\"icons\"\r\n                                                style={{ cursor: 'pointer' }}\r\n                                                onClick={e => {\r\n                                                    onEditClick(item, index, \"completed\")\r\n                                                }}\r\n\r\n                                            />\r\n                                            <DeleteIcon\r\n                                                className=\"icons\"\r\n                                                style={{ cursor: 'pointer' }}\r\n                                                onClick={e => {\r\n                                                    onDeleteClick(item, index, \"completed\")\r\n                                                }}\r\n                                            />\r\n                                            <div className=\"title\">{item.title}</div>\r\n                                            <div className=\"content\">{item.body}</div>\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n\r\n            {isEditModalOpen && <EditModal\r\n                open={isEditModalOpen}\r\n                onClose={setEditModalOpen}\r\n                selectedValue={selectedValue}\r\n                setStateData={setStateData}\r\n                stateData={stateData}\r\n            />}\r\n\r\n            {isAddModalOpen && <AddModal\r\n                open={isAddModalOpen}\r\n                onClose={setAddModalOpen}\r\n                setStateData={setStateData}\r\n                stateData={stateData}\r\n            />}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Board","import Board from \"./Components/Board\";\nimport  \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}